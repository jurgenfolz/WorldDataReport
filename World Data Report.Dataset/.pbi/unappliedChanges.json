{
  "version": "1.0",
  "conceptualSchemaSettings": {},
  "queries": [
    {
      "name": "unziper",
      "lineageTag": "e8856732-1ec2-4d05-ad58-d9e78188ed3b",
      "queryGroupId": "aa211285-d5c5-4f09-9310-bb5cd3de5881",
      "navigationStepName": "Navigation",
      "text": [
        "(ZipFile as binary) => let",
        "",
        "    //Load the file into a buffer",
        "",
        "    ZipFileBuffer = Binary.Buffer(ZipFile),",
        "",
        "    ZipFileSize = Binary.Length(ZipFileBuffer),",
        "",
        " ",
        "",
        "    //Constant values used in the query",
        "",
        "    CentralHeaderSignature = 0x02014b50,",
        "",
        "    CentralHeaderSize = 42,",
        "",
        "    LocalHeaderSize = 30,",
        "",
        " ",
        "",
        "    // Predefined byteformats that are used many times over",
        "",
        "    Unsigned16BitLittleIEndian = BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger16, ByteOrder.LittleEndian),",
        "",
        "    Unsigned32BitLittleIEndian = BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger32, ByteOrder.LittleEndian),",
        "",
        " ",
        "",
        "    // Definition of central directory header",
        "",
        "    CentralDirectoryHeader  = BinaryFormat.Record([",
        "",
        "        Version                = Unsigned16BitLittleIEndian,",
        "",
        "        VersionNeeded          = Unsigned16BitLittleIEndian,",
        "",
        "        GeneralPurposeFlag     = Unsigned16BitLittleIEndian,",
        "",
        "        CompressionMethod      = Unsigned16BitLittleIEndian,",
        "",
        "        LastModifiedTime       = Unsigned16BitLittleIEndian,",
        "",
        "        LastModifiedDate       = Unsigned16BitLittleIEndian,",
        "",
        "        CRC32                  = Unsigned32BitLittleIEndian,",
        "",
        "        CompressedSize         = Unsigned32BitLittleIEndian,",
        "",
        "        UncompressedSize       = Unsigned32BitLittleIEndian,",
        "",
        "        FileNameLength         = Unsigned16BitLittleIEndian,",
        "",
        "        ExtrasLength           = Unsigned16BitLittleIEndian,",
        "",
        "        FileCommentLenght      = Unsigned16BitLittleIEndian,",
        "",
        "        DiskNumberStarts       = Unsigned16BitLittleIEndian,",
        "",
        "        InternalFileAttributes = Unsigned16BitLittleIEndian,",
        "",
        "        EnternalFileAttributes = Unsigned32BitLittleIEndian,",
        "",
        "        LocalHeaderOffset      = Unsigned32BitLittleIEndian",
        "",
        "    ]),",
        "",
        " ",
        "",
        "    // Definition of the end of central directory record",
        "",
        "    EndOfCentralDirectoryRecord  = BinaryFormat.Record([",
        "",
        "        RestOfFile                      = BinaryFormat.Binary(ZipFileSize-22),",
        "",
        "        EOCDsignature                   = Unsigned32BitLittleIEndian,",
        "",
        "        NumberOfThisDisk                = Unsigned16BitLittleIEndian,",
        "",
        "        DiskWhereCentralDirectoryStarts = Unsigned16BitLittleIEndian,",
        "",
        "        NumberOfRecordsOnThisDisk       = Unsigned16BitLittleIEndian,",
        "",
        "        TotalNumberOfRecords            = Unsigned16BitLittleIEndian,",
        "",
        "        CentralDirectorySize            = Unsigned32BitLittleIEndian,",
        "",
        "        OffsetToStart                   = Unsigned32BitLittleIEndian",
        "",
        "    ]),",
        "",
        " ",
        "",
        "    //Formatter used for building a table of all files in te central directory",
        "",
        "    CentralHeaderFormatter = BinaryFormat.Choice(",
        "",
        "        Unsigned32BitLittleIEndian, // Should contain the signature",
        "",
        "        each if _ <> CentralHeaderSignature // Test if the signature is not there",
        "",
        "            then BinaryFormat.Record([",
        "",
        "                        LocalHeaderOffset = null,",
        "",
        "                        CompressedSize = null,",
        "",
        "                        FileNameLength = null,",
        "",
        "                        HeaderSize = null,",
        "",
        "                        IsValid  = false,",
        "",
        "                        Filename = null",
        "",
        "               ]) // if so create a dummy entry",
        "",
        "            else BinaryFormat.Choice(",
        "",
        "                    //Catch the staticly sized part of the central header",
        "",
        "                    BinaryFormat.Binary(CentralHeaderSize),  ",
        "",
        "                    //Create a record containing the files size, offset(of the local header), name, etc..",
        "",
        "                    each BinaryFormat.Record([",
        "",
        "                        LocalHeaderOffset = CentralDirectoryHeader(_)[LocalHeaderOffset],",
        "",
        "                        CompressedSize = CentralDirectoryHeader(_)[CompressedSize],",
        "",
        "                        FileNameLength = CentralDirectoryHeader(_)[FileNameLength],",
        "",
        "                        HeaderSize = LocalHeaderSize +",
        "",
        "                                    CentralDirectoryHeader(_)[FileNameLength] +",
        "",
        "                                    CentralDirectoryHeader(_)[ExtrasLength],",
        "",
        "                        IsValid  = true,",
        "",
        "                        Filename = BinaryFormat.Text(CentralDirectoryHeader(_)[FileNameLength])",
        "",
        "                        ]),",
        "",
        "                    type binary",
        "",
        "                )",
        "",
        "    ),",
        "",
        " ",
        "",
        "    //Get a record of the end of central directory, this contains the offset of the central header so we can itterate from that position",
        "",
        "    EOCDR = EndOfCentralDirectoryRecord(ZipFileBuffer),",
        "",
        " ",
        "",
        "    //Get the central directory as a binary extract",
        "",
        "    CentralDirectory = Binary.Range(ZipFileBuffer,EOCDR[OffsetToStart]),",
        "",
        " ",
        "",
        "    //A list formatter for the central directory ",
        "",
        "    CentralDirectoryFormatter = BinaryFormat.List(CentralHeaderFormatter, each _[IsValid] = true),",
        "",
        " ",
        "",
        "    //Get a Table from Records containing the file info extracted from the central directory",
        "",
        "    FilesTable  = Table.FromRecords(List.RemoveLastN(CentralDirectoryFormatter(CentralDirectory),1)),",
        "",
        "   ",
        "",
        "    //Add the binary to the table and decompress it",
        "",
        "    ReturnValue = Table.AddColumn(FilesTable,\"Content\",each Binary.Decompress(Binary.Range(ZipFileBuffer,[LocalHeaderOffset] + [HeaderSize],[CompressedSize]),Compression.Deflate))",
        "",
        "in",
        "",
        "    ReturnValue"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Function",
      "isHidden": false
    },
    {
      "name": "GeoNamesURL",
      "lineageTag": "e5b85d35-8f7c-4c2d-9da1-16f56219ed6f",
      "queryGroupId": "fcc440ec-5027-4b8d-966b-b905ad15e441",
      "navigationStepName": "Navigation",
      "text": [
        "\"http://download.geonames.org/export/dump/\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "API Key",
      "lineageTag": "7d26df85-dce5-4531-a35f-31ba23be24f3",
      "queryGroupId": "fcc440ec-5027-4b8d-966b-b905ad15e441",
      "navigationStepName": "Navigation",
      "text": [
        "null meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "GeoNames",
      "lineageTag": "47aa255c-a926-44cb-b58a-700ea24179f1",
      "queryGroupId": "aa461485-fe4f-48fe-b2d9-c32a133657bd",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"ddRtbxJBFMXx79LXaqpJP4A7wLDszroyw/bBGENatBgKDdQY/fQ2jemP+PDuZKD3nv85t3z4cPJ29Orn+v7k44tHOSYnZCRrsiUT2ZHvyPfknMxkIRfkOXlBXj3L6i1ZkYAqQBWgClA1JbFVMxJmBbOCWcGsYFYwK5gVzGogYVaXJMwAMwQSZsAWsAVsAVtoSGwBW8AWsAVAAVBQVgAUAAW9BWwB20hDI6mPmBxxNmJnZMJYJGPDxnIYy2GMYoxirJaJoCbsTNiZsDNhZ2JuVFZ0k1FZkcmot8hv5DeyE5UVeYjKij3pEOORM8QRcVRh1FtU1hT81OKpxVMrpuZOza3B1+BrQLW5tbm1fGtAtW01oNrimRUzc2eGzQTV+G6jgEYBjQIawxomm6NhnDWSbCTZONrWlbSupHXKrcWtAlorWvAt+FbqrX/IlodkcbItaSiJJDnPJJ0kncRZ0mYSVBJUUkCSWVJswpawJWwJW8KWRJ382KQjYql34DvwHeIOcYe400UHswPUAepQdPx2PLyTTs9Oz0PPQ89DL/Ve6j07/dFcqffs9ELthdqLr5fZe87mnM0Rzw2bw5wblk3IDjxLPTu5bEVGnBFnBWS/ylkOWQ5ZDlkOmfUskowiiyQ7ruyisnSyNgugAqiosAAqgAqKgqKgKCgKioKioCisF9aLLgq/C7UsOFvYthDJAvHChMGEAfygwsHcQW8DisHBnAvq3OILkVyaewnz0oQrdq5QXIFf3tytt2F3szrztNmE3bftw369Ohw9Pqz22+XDqlve/fd5ePP8wfX64fHPX5+env75dPb329m/Xjzdrlf75f769sfzy3b38vrJoqfD7fJ+dfj0aP7TZvf9z+fD+u5+s/68Xt08ffr1sNs+f+XbYbUvyy+/oT7+Ag==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [zip_files = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"zip_files\", type text}}),",
        "    #\"Added Custom\" = Table.AddColumn(#\"Changed Type\", \"FullURL\", each GeoNamesURL&[zip_files], type text)",
        "in",
        "    #\"Added Custom\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "dCountries",
      "lineageTag": "79a7641b-6474-4e48-831c-d7d94faf95e9",
      "queryGroupId": "aa461485-fe4f-48fe-b2d9-c32a133657bd",
      "text": [
        "let",
        "    Source = Csv.Document(Web.Contents(\"http://download.geonames.org/export/dump/countryInfo.txt\"),[Delimiter=\"#(tab)\", Columns=19, Encoding=65001, QuoteStyle=QuoteStyle.None]),",
        "    #\"Change Type\" = Table.TransformColumnTypes(Source,{{\"Column1\", type text}, {\"Column2\", type text}, {\"Column3\", type text}, {\"Column4\", type text}, {\"Column5\", type text}, {\"Column6\", type text}, {\"Column7\", type text}, {\"Column8\", type text}, {\"Column9\", type text}, {\"Column10\", type text}, {\"Column11\", type text}, {\"Column12\", type text}, {\"Column13\", type text}, {\"Column14\", type text}, {\"Column15\", type text}, {\"Column16\", type text}, {\"Column17\", type text}, {\"Column18\", type text}, {\"Column19\", type text}}),",
        "    #\"Removed Top Rows\" = Table.Skip(#\"Change Type\",49),",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(#\"Removed Top Rows\", [PromoteAllScalars=true]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"#ISO\", type text}, {\"ISO3\", type text}, {\"ISO-Numeric\", Int64.Type}, {\"fips\", type text}, {\"Country\", type text}, {\"Capital\", type text}, {\"Area(in sq km)\", Int64.Type}, {\"Population\", Int64.Type}, {\"Continent\", type text}, {\"tld\", type text}, {\"CurrencyCode\", type text}, {\"CurrencyName\", type text}, {\"Phone\", type text}, {\"Postal Code Format\", type text}, {\"Postal Code Regex\", type text}, {\"Languages\", type text}, {\"geonameid\", Int64.Type}, {\"neighbours\", type text}, {\"EquivalentFipsCode\", type text}}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"#ISO\", \"ISO\"}, {\"Continent\", \"ContinentAbreviation\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "isDirectQuery": false,
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "dCities",
      "lineageTag": "ccb7bde8-a249-4d43-a02b-2c1cdba50e95",
      "queryGroupId": "aa461485-fe4f-48fe-b2d9-c32a133657bd",
      "text": [
        "let",
        "    Source = GeoNames,",
        "    #\"Filtered Rows\" = Table.SelectRows(Source, each ([zip_files] = \"cities15000.zip\")),",
        "    ZipFilecontent = Table.AddColumn(#\"Filtered Rows\", \"zipContent\", each Web.Contents([FullURL]),type binary),",
        "    #\"Added CSV bin content\" = Table.AddColumn(ZipFilecontent, \"Content\", each unziper([zipContent]), type table),",
        "    #\"Expanded Content\" = Table.ExpandTableColumn(#\"Added CSV bin content\", \"Content\", {\"Content\"}, {\"Content.Content\"}),",
        "    #\"Content Extract\" = #\"Expanded Content\"{0}[Content.Content],",
        "    #\"Imported CSV\" = Csv.Document(#\"Content Extract\",[Delimiter=\"#(tab)\", Columns=19, Encoding=65001, QuoteStyle=QuoteStyle.None]),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Imported CSV\",{\"Column1\",\"Column2\", \"Column3\", \"Column5\", \"Column6\", \"Column8\", \"Column9\", \"Column15\", \"Column17\", \"Column18\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Other Columns\",{{\"Column1\", \"ID\"},{\"Column2\", \"name\"}, {\"Column3\", \"asciiname\"}, {\"Column5\", \"lat\"}, {\"Column6\", \"lon\"}, {\"Column8\", \"class\"}, {\"Column9\", \"country_code\"}, {\"Column15\", \"pop\"}, {\"Column17\", \"elevation\"}, {\"Column18\", \"timezone\"}}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"ID\", Int64.Type}}),",
        "    #\"Changed Type with Locale\" = Table.TransformColumnTypes(#\"Changed Type\", {{\"lat\", type number}, {\"lon\", type number}}, \"en-US\")",
        "in",
        "    #\"Changed Type with Locale\""
      ],
      "isDirectQuery": false,
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "factForecast",
      "lineageTag": "912d1b37-c7b5-4a9a-a3d9-ac691a5c0bed",
      "queryGroupId": "f3b0d58c-f7fb-4a4c-90f1-77cc0d12b685",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = GeoNames,",
        "    #\"Filtered Rows\" = Table.SelectRows(Source, each ([zip_files] = \"cities15000.zip\")),",
        "    ZipFilecontent = Table.AddColumn(#\"Filtered Rows\", \"zipContent\", each Web.Contents([FullURL]),type binary),",
        "    #\"Added CSV bin content\" = Table.AddColumn(ZipFilecontent, \"Content\", each unziper([zipContent]), type table),",
        "    #\"Expanded Content\" = Table.ExpandTableColumn(#\"Added CSV bin content\", \"Content\", {\"Content\"}, {\"Content.Content\"}),",
        "    #\"Content Extract\" = #\"Expanded Content\"{0}[Content.Content],",
        "    #\"Imported CSV\" = Csv.Document(#\"Content Extract\",[Delimiter=\"#(tab)\", Columns=19, Encoding=65001, QuoteStyle=QuoteStyle.None]),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Imported CSV\",{\"Column1\",\"Column2\", \"Column3\", \"Column5\", \"Column6\", \"Column8\", \"Column9\", \"Column15\", \"Column17\", \"Column18\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Other Columns\",{{\"Column1\", \"ID\"},{\"Column2\", \"name\"}, {\"Column3\", \"asciiname\"}, {\"Column5\", \"lat\"}, {\"Column6\", \"lon\"}, {\"Column8\", \"class\"}, {\"Column9\", \"country_code\"}, {\"Column15\", \"pop\"}, {\"Column17\", \"elevation\"}, {\"Column18\", \"timezone\"}}),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"ID\", Int64.Type}}),",
        "    #\"Kept only city col\" = Table.SelectColumns(#\"Changed Type1\",{\"name\",\"ID\"}),",
        "    #\"Added API Forecast call\" = Table.AddColumn(#\"Kept only city col\", \"APicall\", each Json.Document(",
        "    Web.Contents(",
        "        \"http://api.weatherapi.com\",[RelativePath=\"v1/forecast.json?\", Query=[",
        "                    key=#\"API Key\",",
        "                    days=\"10\",",
        "                    aqi=\"no\",",
        "                    q=[name]",
        "                    ]]))),",
        "    #\"Removed Errors\" = Table.RemoveRowsWithErrors(#\"Added API Forecast call\", {\"APicall\"}),",
        "    #\"Expanded APicall\" = Table.ExpandRecordColumn(#\"Removed Errors\", \"APicall\", {\"forecast\"}, {\"forecast\"}),",
        "    #\"Expanded forecast\" = Table.ExpandRecordColumn(#\"Expanded APicall\", \"forecast\", {\"forecastday\"}, {\"forecastday\"}),",
        "    #\"Expanded forecastday\" = Table.ExpandListColumn(#\"Expanded forecast\", \"forecastday\"),",
        "    #\"Expanded forecastday1\" = Table.ExpandRecordColumn(#\"Expanded forecastday\", \"forecastday\", {\"hour\"}, {\"hour\"}),",
        "    #\"Expanded hour\" = Table.ExpandListColumn(#\"Expanded forecastday1\", \"hour\"),",
        "    #\"Expanded hour1\" = Table.ExpandRecordColumn(#\"Expanded hour\", \"hour\", {\"time\", \"temp_c\", \"temp_f\", \"condition\", \"wind_mph\", \"wind_kph\", \"wind_degree\", \"wind_dir\", \"pressure_mb\", \"pressure_in\", \"precip_mm\", \"precip_in\", \"humidity\", \"cloud\", \"feelslike_c\", \"feelslike_f\", \"windchill_c\", \"windchill_f\", \"chance_of_rain\", \"chance_of_snow\", \"uv\"}, {\"time\", \"temp_c\", \"temp_f\", \"condition\", \"wind_mph\", \"wind_kph\", \"wind_degree\", \"wind_dir\", \"pressure_mb\", \"pressure_in\", \"precip_mm\", \"precip_in\", \"humidity\", \"cloud\", \"feelslike_c\", \"feelslike_f\", \"windchill_c\", \"windchill_f\", \"chance_of_rain\", \"chance_of_snow\", \"uv\"}),",
        "    #\"Expanded condition\" = Table.ExpandRecordColumn(#\"Expanded hour1\", \"condition\", {\"text\", \"icon\"}, {\"text\", \"icon\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded condition\",{{\"temp_f\", type number}, {\"temp_c\", type number}, {\"wind_mph\", type number}, {\"wind_kph\", type number}, {\"pressure_in\", type number}, {\"precip_mm\", type number}, {\"precip_in\", type number}, {\"feelslike_c\", type number}, {\"feelslike_f\", type number}, {\"windchill_c\", type number}, {\"windchill_f\", type number}, {\"time\", type datetime}, {\"text\", type text}, {\"icon\", type text}, {\"wind_dir\", type text}, {\"wind_degree\", Int64.Type}, {\"pressure_mb\", Int64.Type}, {\"humidity\", Int64.Type}, {\"cloud\", Int64.Type}, {\"chance_of_rain\", Int64.Type}, {\"chance_of_snow\", Int64.Type}}),",
        "    #\"Added Cond. Icon url\" = Table.AddColumn(#\"Changed Type\", \"ConditionIcon\", each \"https:\"&[icon],type text),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Added Cond. Icon url\",{\"icon\"})",
        "in",
        "    #\"Removed Columns\""
      ],
      "isDirectQuery": false,
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "factData",
      "lineageTag": "4d5f63d6-1249-4e3e-bf00-329693145aeb",
      "queryGroupId": "f3b0d58c-f7fb-4a4c-90f1-77cc0d12b685",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Table.Combine({factBirthsDeaths, factCarbonIntensityElectricity, factFreedomOfExpressionIndex, factGDP, factGDPperCapita, factHDI, factMerchandiseExportsGdp, factPopulation, factLifeExpectancy, factExpectedYearsSchooling, factGNI})",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "loadAsTableDisabled": false,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "Countries Info Text",
      "lineageTag": "e9ff39d4-12cf-402d-a7e5-d33d781fd2ad",
      "queryGroupId": "fcc440ec-5027-4b8d-966b-b905ad15e441",
      "navigationStepName": "Navigation",
      "text": [
        "\"http://download.geonames.org/export/dump/countryInfo.txt\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "factBirthsDeaths",
      "lineageTag": "3e7e99a2-e816-4dda-a90f-8893165305e2",
      "queryGroupId": "fa827af6-c7f2-4ced-94e8-731c0ba90f01",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Csv.Document(File.Contents(PathToCSV&\"births-and-deaths-projected-to-2100.csv\"),[Delimiter=\",\", Columns=7, Encoding=1252, QuoteStyle=QuoteStyle.None]),",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),",
        "    #\"Extracted Text Before Delimiter\" = Table.TransformColumns(#\"Promoted Headers\", {{\"Deaths - Sex: all - Age: all - Variant: estimates\", each Text.BeforeDelimiter(_, \".\"), type text}, {\"Births - Sex: all - Age: all - Variant: estimates\", each Text.BeforeDelimiter(_, \".\"), type text}}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Extracted Text Before Delimiter\",{{\"Entity\", type text}, {\"Code\", type text}, {\"Year\", Int64.Type}, {\"Deaths - Sex: all - Age: all - Variant: estimates\", type number}, {\"Deaths - Sex: all - Age: all - Variant: medium\", type number}, {\"Births - Sex: all - Age: all - Variant: estimates\", type number}, {\"Births - Sex: all - Age: all - Variant: medium\", type number}}),",
        "    #\"Filtered only past\" = Table.SelectRows(#\"Changed Type\", each ([#\"Deaths - Sex: all - Age: all - Variant: estimates\"] <> null and [#\"Deaths - Sex: all - Age: all - Variant: estimates\"] <> \"\")),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Filtered only past\",{{\"Deaths - Sex: all - Age: all - Variant: estimates\", \"Deaths\"}, {\"Births - Sex: all - Age: all - Variant: estimates\", \"Births\"}}),",
        "    #\"Filtered blanks on ISO\" = Table.SelectRows(#\"Renamed Columns\", each ([Code] <> \"\")),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Filtered blanks on ISO\",{\"Entity\", \"Code\", \"Year\", \"Deaths\", \"Births\"}),",
        "    #\"Unpivoted Columns\" = Table.UnpivotOtherColumns(#\"Removed Other Columns\", {\"Entity\", \"Code\", \"Year\"}, \"Attribute\", \"Value\")",
        "in",
        "    #\"Unpivoted Columns\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "PathToCSV",
      "lineageTag": "798e7337-1f42-4a2f-85de-2529127ca517",
      "queryGroupId": "fcc440ec-5027-4b8d-966b-b905ad15e441",
      "navigationStepName": "Navigation",
      "text": [
        "\"C:\\Users\\nini_\\OneDrive\\Área de Trabalho\\Drive\\Repositories\\WorldDataReport\\Data\\\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "factCarbonIntensityElectricity",
      "lineageTag": "8c852217-cc6b-4079-930a-d9ea66b1f8f9",
      "queryGroupId": "fa827af6-c7f2-4ced-94e8-731c0ba90f01",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Csv.Document(File.Contents(PathToCSV&\"carbon-intensity-electricity.csv\"),[Delimiter=\",\", Columns=7, Encoding=1252, QuoteStyle=QuoteStyle.None]),",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Promoted Headers\",{\"Entity\", \"Code\", \"Year\", \"Carbon intensity of electricity (gCO2/kWh)\"}),",
        "    #\"Filtered blanks on ISO\" = Table.SelectRows(#\"Removed Other Columns\", each ([Code] <> \"\")),",
        "    #\"Changed Type with Locale\" = Table.TransformColumnTypes(#\"Filtered blanks on ISO\", {{\"Carbon intensity of electricity (gCO2/kWh)\", type number}}, \"en-US\"),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Changed Type with Locale\",{{\"Year\", Int64.Type}}),",
        "    #\"Unpivoted Columns\" = Table.UnpivotOtherColumns(#\"Changed Type\", {\"Entity\", \"Code\", \"Year\"}, \"Attribute\", \"Value\")",
        "in",
        "    #\"Unpivoted Columns\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "factFreedomOfExpressionIndex",
      "lineageTag": "b5cd53b9-d300-485f-9d23-3cd17548ded7",
      "queryGroupId": "fa827af6-c7f2-4ced-94e8-731c0ba90f01",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Csv.Document(File.Contents(PathToCSV&\"freedom-of-expression-index.csv\"),[Delimiter=\",\", Columns=7, Encoding=1252, QuoteStyle=QuoteStyle.None]),",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Promoted Headers\",{\"Entity\", \"Code\", \"Year\", \"freeexpr_vdem_owid\", \"freeexpr_vdem_high_owid\", \"freeexpr_vdem_low_owid\"}),",
        "    #\"Changed Type with Locale\" = Table.TransformColumnTypes(#\"Removed Other Columns\", {{\"freeexpr_vdem_owid\", type number}, {\"freeexpr_vdem_high_owid\", type number}, {\"freeexpr_vdem_low_owid\", type number}}, \"en-US\"),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Changed Type with Locale\",{{\"Year\", Int64.Type}}),",
        "    #\"Filtered blanks on ISO\" = Table.SelectRows(#\"Changed Type\", each [Code] <> null and [Code] <> \"\"),",
        "    #\"Unpivoted Columns\" = Table.UnpivotOtherColumns(#\"Filtered blanks on ISO\", {\"Entity\", \"Code\", \"Year\"}, \"Attribute\", \"Value\")",
        "in",
        "    #\"Unpivoted Columns\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "factGDP",
      "lineageTag": "844a3a4b-99f6-46c4-a3ef-c94a431fae83",
      "queryGroupId": "fa827af6-c7f2-4ced-94e8-731c0ba90f01",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Csv.Document(File.Contents(PathToCSV&\"gdp.csv\"),[Delimiter=\",\", Columns=7, Encoding=1252, QuoteStyle=QuoteStyle.None]),",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Promoted Headers\",{\"Entity\", \"Code\", \"Year\", \"GDP (constant 2015 US$)\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Other Columns\",{{\"GDP (constant 2015 US$)\", type number}, {\"Year\", Int64.Type}}),",
        "    #\"Filtered blanks on ISO\" = Table.SelectRows(#\"Changed Type\", each [Code] <> null and [Code] <> \"\"),",
        "    #\"Unpivoted Columns\" = Table.UnpivotOtherColumns(#\"Filtered blanks on ISO\", {\"Entity\", \"Code\", \"Year\"}, \"Attribute\", \"Value\")",
        "in",
        "    #\"Unpivoted Columns\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "factGDPperCapita",
      "lineageTag": "d1fb8da1-42e7-43e0-81f5-8f62a8bb7b2f",
      "queryGroupId": "fa827af6-c7f2-4ced-94e8-731c0ba90f01",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Csv.Document(File.Contents(PathToCSV&\"gdp-per-capita.csv\"),[Delimiter=\",\", Columns=7, Encoding=1252, QuoteStyle=QuoteStyle.None]),",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Promoted Headers\",{\"Entity\", \"Code\", \"Year\", \"GDP per capita\"}),",
        "    #\"Changed Type with Locale\" = Table.TransformColumnTypes(#\"Removed Other Columns\", {{\"GDP per capita\", type number}}, \"en-US\"),",
        "    #\"Filtered blanks on ISO\" = Table.SelectRows(#\"Changed Type with Locale\", each [Code] <> null and [Code] <> \"\"),",
        "    #\"Unpivoted Columns\" = Table.UnpivotOtherColumns(#\"Filtered blanks on ISO\", {\"Entity\", \"Code\", \"Year\"}, \"Attribute\", \"Value\"),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Unpivoted Columns\",{{\"Year\", Int64.Type}})",
        "in",
        "    #\"Changed Type\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "factHDI",
      "lineageTag": "f98b1a46-a160-4cee-aa07-b4f38ed185d3",
      "queryGroupId": "fa827af6-c7f2-4ced-94e8-731c0ba90f01",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Csv.Document(File.Contents(PathToCSV&\"human-development-index.csv\"),[Delimiter=\",\", Columns=7, Encoding=1252, QuoteStyle=QuoteStyle.None]),",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Promoted Headers\",{\"Entity\", \"Code\", \"Year\", \"Human Development Index\"}),",
        "    #\"Filtered blanks on ISO\" = Table.SelectRows(#\"Removed Other Columns\", each [Code] <> null and [Code] <> \"\"),",
        "    #\"Changed Type with Locale\" = Table.TransformColumnTypes(#\"Filtered blanks on ISO\", {{\"Human Development Index\", type number}}, \"en-US\"),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Changed Type with Locale\",{{\"Year\", Int64.Type}}),",
        "    #\"Unpivoted Columns\" = Table.UnpivotOtherColumns(#\"Changed Type\", {\"Entity\", \"Code\", \"Year\"}, \"Attribute\", \"Value\")",
        "in",
        "    #\"Unpivoted Columns\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "factMerchandiseExportsGdp",
      "lineageTag": "a2902d91-976f-42c2-baf0-69e8990a261d",
      "queryGroupId": "fa827af6-c7f2-4ced-94e8-731c0ba90f01",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Csv.Document(File.Contents(PathToCSV&\"merchandise-exports-gdp-cepii.csv\"),[Delimiter=\",\", Columns=7, Encoding=1252, QuoteStyle=QuoteStyle.None]),",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Promoted Headers\",{\"Entity\", \"Code\", \"Year\", \"Value of global merchandise exports as a share of GDP (Fouquin and Hugot; CEPII 2016; National data)\"}),",
        "    #\"Filtered blanks on ISO\" = Table.SelectRows(#\"Removed Other Columns\", each [Code] <> null and [Code] <> \"\"),",
        "    #\"Changed Type with Locale\" = Table.TransformColumnTypes(#\"Filtered blanks on ISO\", {{\"Value of global merchandise exports as a share of GDP (Fouquin and Hugot; CEPII 2016; National data)\", type number}}, \"en-US\"),",
        "    #\"Added % col\" = Table.AddColumn(#\"Changed Type with Locale\", \"Value of global merchandise exports as a share of GDP\", each [#\"Value of global merchandise exports as a share of GDP (Fouquin and Hugot; CEPII 2016; National data)\"]/100, type number),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Added % col\",{\"Value of global merchandise exports as a share of GDP (Fouquin and Hugot; CEPII 2016; National data)\"}),",
        "    #\"Unpivoted Columns\" = Table.UnpivotOtherColumns(#\"Removed Columns\", {\"Entity\", \"Code\", \"Year\"}, \"Attribute\", \"Value\"),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Unpivoted Columns\",{{\"Year\", Int64.Type}})",
        "in",
        "    #\"Changed Type\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "factPopulation",
      "lineageTag": "426dd05b-8701-4979-96a6-f6088f184d81",
      "queryGroupId": "fa827af6-c7f2-4ced-94e8-731c0ba90f01",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Csv.Document(File.Contents(PathToCSV&\"population.csv\"),[Delimiter=\",\", Columns=7, Encoding=1252, QuoteStyle=QuoteStyle.None]),",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Promoted Headers\",{\"Entity\", \"Code\", \"Year\", \"Population (historical estimates)\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Other Columns\",{{\"Population (historical estimates)\", \"Population\"}}),",
        "    #\"Filtered blanks on ISO\" = Table.SelectRows(#\"Renamed Columns\", each [Code] <> null and [Code] <> \"\"),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Filtered blanks on ISO\",{{\"Population\", Int64.Type}, {\"Year\", Int64.Type}}),",
        "    #\"Unpivoted Columns\" = Table.UnpivotOtherColumns(#\"Changed Type\", {\"Entity\", \"Code\", \"Year\"}, \"Attribute\", \"Value\")",
        "in",
        "    #\"Unpivoted Columns\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "_Measures",
      "lineageTag": "094665df-3b7b-40b1-8e37-58373a21a77c",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i44FAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Column1\", type text}}),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type\",{\"Column1\"})",
        "in",
        "    #\"Removed Columns\""
      ],
      "isDirectQuery": false,
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "dMetricSystem",
      "lineageTag": "8bd251fb-eb01-4896-86e7-8540caece494",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45W8swrSS3KSyzJzM9LzFEoriwuSc1VitUBSuQWpBZlIonFAgA=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#\"Metric System\" = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Metric System\", type text}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "dMetrics",
      "lineageTag": "92283c49-0c4d-4746-854f-9b05a6273ecf",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"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\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Attribute = _t, Alias = _t, #\"Parameter name\" = _t, Description = _t, Source = _t, Link = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Attribute\", type text}, {\"Alias\", type text}, {\"Description\", type text}, {\"Source\", type text}, {\"Link\", type text}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "factLifeExpectancy",
      "lineageTag": "1adf66d9-2e55-4d16-91d3-84b7cfb4dd2e",
      "queryGroupId": "fa827af6-c7f2-4ced-94e8-731c0ba90f01",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Csv.Document(File.Contents(PathToCSV&\"life-expectancy.csv\"),[Delimiter=\",\", Columns=7, Encoding=1252, QuoteStyle=QuoteStyle.None]),",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Promoted Headers\",{\"Entity\", \"Code\", \"Year\", \"Life expectancy at birth (historical)\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Other Columns\",{{\"Year\", Int64.Type}}),",
        "    #\"Changed Type with Locale\" = Table.TransformColumnTypes(#\"Changed Type\", {{\"Life expectancy at birth (historical)\", type number}}, \"en-US\"),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type with Locale\",{{\"Life expectancy at birth (historical)\", \"Life expectancy at birth\"}}),",
        "    #\"Unpivoted Columns\" = Table.UnpivotOtherColumns(#\"Renamed Columns\", {\"Entity\", \"Code\", \"Year\"}, \"Attribute\", \"Value\"),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Unpivoted Columns\", each [Code] <> null and [Code] <> \"\")",
        "in",
        "    #\"Filtered Rows\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "factExpectedYearsSchooling",
      "lineageTag": "a3002107-bde7-4d09-8d17-449c83e9f6b4",
      "queryGroupId": "fa827af6-c7f2-4ced-94e8-731c0ba90f01",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Csv.Document(File.Contents(PathToCSV&\"expected-years-of-schooling.csv\"),[Delimiter=\",\", Columns=7, Encoding=1252, QuoteStyle=QuoteStyle.None]),",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Promoted Headers\",{\"Entity\", \"Code\", \"Year\", \"Expected Years of Schooling\"}),",
        "    #\"Changed Type with Locale\" = Table.TransformColumnTypes(#\"Removed Other Columns\", {{\"Expected Years of Schooling\", type number}}, \"en-US\"),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Changed Type with Locale\",{{\"Year\", Int64.Type}}),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Changed Type\", each [Code] <> null and [Code] <> \"\"),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Filtered Rows\",{{\"Expected Years of Schooling\", \"Expected years of schooling\"}}),",
        "    #\"Unpivoted Columns\" = Table.UnpivotOtherColumns(#\"Renamed Columns\", {\"Entity\", \"Code\", \"Year\"}, \"Attribute\", \"Value\")",
        "in",
        "    #\"Unpivoted Columns\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "factGNI",
      "lineageTag": "9e25e26a-0205-4c85-8890-49791f18469d",
      "queryGroupId": "fa827af6-c7f2-4ced-94e8-731c0ba90f01",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Csv.Document(File.Contents(PathToCSV&\"world-banks-income-groups.csv\"),[Delimiter=\",\", Columns=7, Encoding=1252, QuoteStyle=QuoteStyle.None]),",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Promoted Headers\",{\"Entity\", \"Code\", \"Year\", \"Income classifications (World Bank (2021))\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Other Columns\",{{\"Income classifications (World Bank (2021))\", \"Gross national income\"}}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"Year\", Int64.Type}}),",
        "    #\"Unpivoted Columns\" = Table.UnpivotOtherColumns(#\"Changed Type\", {\"Entity\", \"Code\", \"Year\"}, \"Attribute\", \"Class\"),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Unpivoted Columns\", each [Code] <> null and [Code] <> \"\")",
        "in",
        "    #\"Filtered Rows\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    }
  ],
  "queryGroups": [
    {
      "name": "Dimension Tables",
      "id": "aa461485-fe4f-48fe-b2d9-c32a133657bd",
      "order": 2,
      "description": ""
    },
    {
      "name": "Parameters",
      "id": "fcc440ec-5027-4b8d-966b-b905ad15e441",
      "description": ""
    },
    {
      "name": "Custom Functions",
      "id": "aa211285-d5c5-4f09-9310-bb5cd3de5881",
      "order": 1,
      "description": ""
    },
    {
      "name": "Fact Tables",
      "id": "f3b0d58c-f7fb-4a4c-90f1-77cc0d12b685",
      "order": 3,
      "description": ""
    },
    {
      "name": "Data",
      "id": "fa827af6-c7f2-4ced-94e8-731c0ba90f01",
      "description": "",
      "parentId": "f3b0d58c-f7fb-4a4c-90f1-77cc0d12b685"
    }
  ],
  "culture": "pt-BR",
  "firewallEnabled": true
}